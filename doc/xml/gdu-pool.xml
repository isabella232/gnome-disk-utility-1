<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GduPool">
<refmeta>
<refentrytitle role="top_of_page" id="GduPool.top_of_page">GduPool</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-DISK-UTILITY Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GduPool</refname>
<refpurpose>Enumerate and monitor storage devices</refpurpose>
</refnamediv>

<refsynopsisdiv id="GduPool.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GduPoolPrivate">GduPoolPrivate</link>;
                    <link linkend="GduPool-struct">GduPool</link>;
<link linkend="GduPool">GduPool</link> *           <link linkend="gdu-pool-new">gdu_pool_new</link>                        (void);
<link linkend="char">char</link> *              <link linkend="gdu-pool-get-daemon-version">gdu_pool_get_daemon_version</link>         (<link linkend="GduPool">GduPool</link> *pool);
<link linkend="gboolean">gboolean</link>            <link linkend="gdu-pool-is-daemon-inhibited">gdu_pool_is_daemon_inhibited</link>        (<link linkend="GduPool">GduPool</link> *pool);
<link linkend="gboolean">gboolean</link>            <link linkend="gdu-pool-supports-luks-devices">gdu_pool_supports_luks_devices</link>      (<link linkend="GduPool">GduPool</link> *pool);
<link linkend="GList">GList</link> *             <link linkend="gdu-pool-get-known-filesystems">gdu_pool_get_known_filesystems</link>      (<link linkend="GduPool">GduPool</link> *pool);
<link linkend="GduKnownFilesystem">GduKnownFilesystem</link> * <link linkend="gdu-pool-get-known-filesystem-by-id">gdu_pool_get_known_filesystem_by_id</link>
                                                        (<link linkend="GduPool">GduPool</link> *pool,
                                                         const <link linkend="char">char</link> *id);
<link linkend="GduDevice">GduDevice</link> *         <link linkend="gdu-pool-get-by-object-path">gdu_pool_get_by_object_path</link>         (<link linkend="GduPool">GduPool</link> *pool,
                                                         const <link linkend="char">char</link> *object_path);
<link linkend="GduDevice">GduDevice</link> *         <link linkend="gdu-pool-get-by-device-file">gdu_pool_get_by_device_file</link>         (<link linkend="GduPool">GduPool</link> *pool,
                                                         const <link linkend="char">char</link> *device_file);
<link linkend="GduPresentable">GduPresentable</link> *    <link linkend="gdu-pool-get-volume-by-device">gdu_pool_get_volume_by_device</link>       (<link linkend="GduPool">GduPool</link> *pool,
                                                         <link linkend="GduDevice">GduDevice</link> *device);
<link linkend="GduPresentable">GduPresentable</link> *    <link linkend="gdu-pool-get-drive-by-device">gdu_pool_get_drive_by_device</link>        (<link linkend="GduPool">GduPool</link> *pool,
                                                         <link linkend="GduDevice">GduDevice</link> *device);
<link linkend="GduPresentable">GduPresentable</link> *    <link linkend="gdu-pool-get-presentable-by-id">gdu_pool_get_presentable_by_id</link>      (<link linkend="GduPool">GduPool</link> *pool,
                                                         const <link linkend="gchar">gchar</link> *id);
<link linkend="GList">GList</link> *             <link linkend="gdu-pool-get-devices">gdu_pool_get_devices</link>                (<link linkend="GduPool">GduPool</link> *pool);
<link linkend="GList">GList</link> *             <link linkend="gdu-pool-get-presentables">gdu_pool_get_presentables</link>           (<link linkend="GduPool">GduPool</link> *pool);
<link linkend="GList">GList</link> *             <link linkend="gdu-pool-get-enclosed-presentables">gdu_pool_get_enclosed_presentables</link>  (<link linkend="GduPool">GduPool</link> *pool,
                                                         <link linkend="GduPresentable">GduPresentable</link> *presentable);
<link linkend="void">void</link>                <link linkend="gdu-pool-op-linux-md-start">gdu_pool_op_linux_md_start</link>          (<link linkend="GduPool">GduPool</link> *pool,
                                                         <link linkend="GPtrArray">GPtrArray</link> *component_objpaths,
                                                         <link linkend="GduPoolLinuxMdStartCompletedFunc">GduPoolLinuxMdStartCompletedFunc</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GduPool.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----GduPool
</synopsis>
</refsect1>






<refsect1 id="GduPool.signals" role="signal_proto">
<title role="signal_proto.title">Signals</title>
<synopsis>
  &quot;<link linkend="GduPool-device-added">device-added</link>&quot;                                   : Run Last
  &quot;<link linkend="GduPool-device-changed">device-changed</link>&quot;                                 : Run Last
  &quot;<link linkend="GduPool-device-job-changed">device-job-changed</link>&quot;                             : Run Last
  &quot;<link linkend="GduPool-device-removed">device-removed</link>&quot;                                 : Run Last
  &quot;<link linkend="GduPool-presentable-added">presentable-added</link>&quot;                              : Run Last
  &quot;<link linkend="GduPool-presentable-changed">presentable-changed</link>&quot;                            : Run Last
  &quot;<link linkend="GduPool-presentable-job-changed">presentable-job-changed</link>&quot;                        : Run Last
  &quot;<link linkend="GduPool-presentable-removed">presentable-removed</link>&quot;                            : Run Last
</synopsis>
</refsect1>


<refsect1 id="GduPool.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="GduPool"><type>GduPool</type></link> object represents a connection to the DeviceKit-disks daemon.</para>
<para>
</para>
</refsect1>

<refsect1 id="GduPool.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GduPoolPrivate" role="struct">
<title>GduPoolPrivate</title>
<indexterm zone="GduPoolPrivate"><primary sortas="GduPoolPrivate">GduPoolPrivate</primary></indexterm><programlisting>typedef struct _GduPoolPrivate GduPoolPrivate;</programlisting>
<para>
</para></refsect2>
<refsect2 id="GduPool-struct" role="struct">
<title>GduPool</title>
<indexterm zone="GduPool-struct"><primary sortas="GduPool">GduPool</primary></indexterm><programlisting>typedef struct _GduPool GduPool;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gdu-pool-new" role="function">
<title>gdu_pool_new ()</title>
<indexterm zone="gdu-pool-new"><primary sortas="gdu_pool_new">gdu_pool_new</primary></indexterm><programlisting><link linkend="GduPool">GduPool</link> *           gdu_pool_new                        (void);</programlisting>
<para>
Create a new <link linkend="GduPool"><type>GduPool</type></link> object.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link> object. Caller must free this object using <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-daemon-version" role="function">
<title>gdu_pool_get_daemon_version ()</title>
<indexterm zone="gdu-pool-get-daemon-version"><primary sortas="gdu_pool_get_daemon_version">gdu_pool_get_daemon_version</primary></indexterm><programlisting><link linkend="char">char</link> *              gdu_pool_get_daemon_version         (<link linkend="GduPool">GduPool</link> *pool);</programlisting>
<para>
Get the version of the DeviceKit-daemon on the system.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> The version of DeviceKit-disks daemon. Caller must free
this string using <link linkend="g-free"><function>g_free()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-is-daemon-inhibited" role="function">
<title>gdu_pool_is_daemon_inhibited ()</title>
<indexterm zone="gdu-pool-is-daemon-inhibited"><primary sortas="gdu_pool_is_daemon_inhibited">gdu_pool_is_daemon_inhibited</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdu_pool_is_daemon_inhibited        (<link linkend="GduPool">GduPool</link> *pool);</programlisting>
<para>
Checks if the daemon is currently inhibited.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if the daemon is inhibited.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-supports-luks-devices" role="function">
<title>gdu_pool_supports_luks_devices ()</title>
<indexterm zone="gdu-pool-supports-luks-devices"><primary sortas="gdu_pool_supports_luks_devices">gdu_pool_supports_luks_devices</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdu_pool_supports_luks_devices      (<link linkend="GduPool">GduPool</link> *pool);</programlisting>
<para>
Determine if the DeviceKit-disks daemon supports LUKS encrypted
devices.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> only if the daemon supports LUKS encrypted devices.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-known-filesystems" role="function">
<title>gdu_pool_get_known_filesystems ()</title>
<indexterm zone="gdu-pool-get-known-filesystems"><primary sortas="gdu_pool_get_known_filesystems">gdu_pool_get_known_filesystems</primary></indexterm><programlisting><link linkend="GList">GList</link> *             gdu_pool_get_known_filesystems      (<link linkend="GduPool">GduPool</link> *pool);</programlisting>
<para>
Get a list of file systems known to the DeviceKit-disks daemon.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GList"><type>GList</type></link> of <link linkend="GduKnownFilesystem"><type>GduKnownFilesystem</type></link> objects. Caller must free
this (unref all objects, then use <link linkend="g-list-free"><function>g_list_free()</function></link>).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-known-filesystem-by-id" role="function">
<title>gdu_pool_get_known_filesystem_by_id ()</title>
<indexterm zone="gdu-pool-get-known-filesystem-by-id"><primary sortas="gdu_pool_get_known_filesystem_by_id">gdu_pool_get_known_filesystem_by_id</primary></indexterm><programlisting><link linkend="GduKnownFilesystem">GduKnownFilesystem</link> * gdu_pool_get_known_filesystem_by_id
                                                        (<link linkend="GduPool">GduPool</link> *pool,
                                                         const <link linkend="char">char</link> *id);</programlisting>
<para>
Looks up a known file system by id.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara> Identifier for the file system, e.g. <literal>ext3</literal> or <literal>vfat</literal>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GduKnownFilesystem"><type>GduKnownFilesystem</type></link> object or <link linkend="NULL--CAPS"><type>NULL</type></link> if file system
corresponding to <parameter>id</parameter> exists. Caller must free this object using
<link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-by-object-path" role="function">
<title>gdu_pool_get_by_object_path ()</title>
<indexterm zone="gdu-pool-get-by-object-path"><primary sortas="gdu_pool_get_by_object_path">gdu_pool_get_by_object_path</primary></indexterm><programlisting><link linkend="GduDevice">GduDevice</link> *         gdu_pool_get_by_object_path         (<link linkend="GduPool">GduPool</link> *pool,
                                                         const <link linkend="char">char</link> *object_path);</programlisting>
<para>
Looks up <link linkend="GduDevice"><type>GduDevice</type></link> object for <parameter>object_path</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> the device pool
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>object_path</parameter>&#160;:</term>
<listitem><simpara> the D-Bus object path
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GduDevice"><type>GduDevice</type></link> object for <parameter>object_path</parameter>, otherwise
<link linkend="NULL--CAPS"><type>NULL</type></link>. Caller must unref this object using <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-by-device-file" role="function">
<title>gdu_pool_get_by_device_file ()</title>
<indexterm zone="gdu-pool-get-by-device-file"><primary sortas="gdu_pool_get_by_device_file">gdu_pool_get_by_device_file</primary></indexterm><programlisting><link linkend="GduDevice">GduDevice</link> *         gdu_pool_get_by_device_file         (<link linkend="GduPool">GduPool</link> *pool,
                                                         const <link linkend="char">char</link> *device_file);</programlisting>
<para>
Looks up <link linkend="GduDevice"><type>GduDevice</type></link> object for <parameter>device_file</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> the device pool
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device_file</parameter>&#160;:</term>
<listitem><simpara> the UNIX block special device file, e.g. /dev/sda1.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GduDevice"><type>GduDevice</type></link> object for <parameter>object_path</parameter>, otherwise
<link linkend="NULL--CAPS"><type>NULL</type></link>. Caller must unref this object using <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-volume-by-device" role="function">
<title>gdu_pool_get_volume_by_device ()</title>
<indexterm zone="gdu-pool-get-volume-by-device"><primary sortas="gdu_pool_get_volume_by_device">gdu_pool_get_volume_by_device</primary></indexterm><programlisting><link linkend="GduPresentable">GduPresentable</link> *    gdu_pool_get_volume_by_device       (<link linkend="GduPool">GduPool</link> *pool,
                                                         <link linkend="GduDevice">GduDevice</link> *device);</programlisting>
<para>
Given <parameter>device</parameter>, find the <link linkend="GduVolume"><type>GduVolume</type></link> object for it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDevice"><type>GduDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GduVolume"><type>GduVolume</type></link> object or <link linkend="NULL--CAPS"><type>NULL</type></link> if no <parameter>device</parameter> isn't a
volume. Caller must free this object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-drive-by-device" role="function">
<title>gdu_pool_get_drive_by_device ()</title>
<indexterm zone="gdu-pool-get-drive-by-device"><primary sortas="gdu_pool_get_drive_by_device">gdu_pool_get_drive_by_device</primary></indexterm><programlisting><link linkend="GduPresentable">GduPresentable</link> *    gdu_pool_get_drive_by_device        (<link linkend="GduPool">GduPool</link> *pool,
                                                         <link linkend="GduDevice">GduDevice</link> *device);</programlisting>
<para>
Given <parameter>device</parameter>, find the <link linkend="GduDrive"><type>GduDrive</type></link> object for it.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDevice"><type>GduDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GduDrive"><type>GduDrive</type></link> object or <link linkend="NULL--CAPS"><type>NULL</type></link> if no <parameter>device</parameter> isn't a
drive. Caller must free this object with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-presentable-by-id" role="function">
<title>gdu_pool_get_presentable_by_id ()</title>
<indexterm zone="gdu-pool-get-presentable-by-id"><primary sortas="gdu_pool_get_presentable_by_id">gdu_pool_get_presentable_by_id</primary></indexterm><programlisting><link linkend="GduPresentable">GduPresentable</link> *    gdu_pool_get_presentable_by_id      (<link linkend="GduPool">GduPool</link> *pool,
                                                         const <link linkend="gchar">gchar</link> *id);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>id</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-devices" role="function">
<title>gdu_pool_get_devices ()</title>
<indexterm zone="gdu-pool-get-devices"><primary sortas="gdu_pool_get_devices">gdu_pool_get_devices</primary></indexterm><programlisting><link linkend="GList">GList</link> *             gdu_pool_get_devices                (<link linkend="GduPool">GduPool</link> *pool);</programlisting>
<para>
Get a list of all devices. The returned list is topologically sorted, e.g.
for any device A with a dependency on a device B, A is guaranteed to appear
after B.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GList"><type>GList</type></link> of <link linkend="GduDevice"><type>GduDevice</type></link> objects. Caller must free this
(unref all objects, then use <link linkend="g-list-free"><function>g_list_free()</function></link>).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-presentables" role="function">
<title>gdu_pool_get_presentables ()</title>
<indexterm zone="gdu-pool-get-presentables"><primary sortas="gdu_pool_get_presentables">gdu_pool_get_presentables</primary></indexterm><programlisting><link linkend="GList">GList</link> *             gdu_pool_get_presentables           (<link linkend="GduPool">GduPool</link> *pool);</programlisting>
<para>
Get a list of all presentables.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GList"><type>GList</type></link> of objects implementing the <link linkend="GduPresentable"><type>GduPresentable</type></link>
interface. Caller must free this (unref all objects, then use
<link linkend="g-list-free"><function>g_list_free()</function></link>).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-get-enclosed-presentables" role="function">
<title>gdu_pool_get_enclosed_presentables ()</title>
<indexterm zone="gdu-pool-get-enclosed-presentables"><primary sortas="gdu_pool_get_enclosed_presentables">gdu_pool_get_enclosed_presentables</primary></indexterm><programlisting><link linkend="GList">GList</link> *             gdu_pool_get_enclosed_presentables  (<link linkend="GduPool">GduPool</link> *pool,
                                                         <link linkend="GduPresentable">GduPresentable</link> *presentable);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presentable</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-pool-op-linux-md-start" role="function">
<title>gdu_pool_op_linux_md_start ()</title>
<indexterm zone="gdu-pool-op-linux-md-start"><primary sortas="gdu_pool_op_linux_md_start">gdu_pool_op_linux_md_start</primary></indexterm><programlisting><link linkend="void">void</link>                gdu_pool_op_linux_md_start          (<link linkend="GduPool">GduPool</link> *pool,
                                                         <link linkend="GPtrArray">GPtrArray</link> *component_objpaths,
                                                         <link linkend="GduPoolLinuxMdStartCompletedFunc">GduPoolLinuxMdStartCompletedFunc</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
Starts a Linux md Software Array.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPool"><type>GduPool</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>component_objpaths</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GPtrArray"><type>GPtrArray</type></link> of object paths.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Callback function.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User data to pass to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>

<refsect1 id="GduPool.signal-details" role="signals">
<title role="signals.title">Signal Details</title>
<refsect2 id="GduPool-device-added" role="signal"><title>The <literal>&quot;device-added&quot;</literal> signal</title>
<indexterm zone="GduPool-device-added"><primary sortas="GduPool::device-added">GduPool::device-added</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GduPool">GduPool</link>   *pool,
                                                        <link linkend="GduDevice">GduDevice</link> *device,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
Emitted when <parameter>device</parameter> is added to <parameter>pool</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPool"><type>GduPool</type></link> emitting the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduDevice"><type>GduDevice</type></link> that was added.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GduPool-device-changed" role="signal"><title>The <literal>&quot;device-changed&quot;</literal> signal</title>
<indexterm zone="GduPool-device-changed"><primary sortas="GduPool::device-changed">GduPool::device-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GduPool">GduPool</link>   *pool,
                                                        <link linkend="GduDevice">GduDevice</link> *device,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
Emitted when <parameter>device</parameter> is changed.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPool"><type>GduPool</type></link> emitting the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDevice"><type>GduDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GduPool-device-job-changed" role="signal"><title>The <literal>&quot;device-job-changed&quot;</literal> signal</title>
<indexterm zone="GduPool-device-job-changed"><primary sortas="GduPool::device-job-changed">GduPool::device-job-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GduPool">GduPool</link>   *pool,
                                                        <link linkend="GduDevice">GduDevice</link> *device,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
Emitted when job status on <parameter>device</parameter> changes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPool"><type>GduPool</type></link> emitting the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDevice"><type>GduDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GduPool-device-removed" role="signal"><title>The <literal>&quot;device-removed&quot;</literal> signal</title>
<indexterm zone="GduPool-device-removed"><primary sortas="GduPool::device-removed">GduPool::device-removed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GduPool">GduPool</link>   *pool,
                                                        <link linkend="GduDevice">GduDevice</link> *device,
                                                        <link linkend="gpointer">gpointer</link>   user_data)      : Run Last</programlisting>
<para>
Emitted when <parameter>device</parameter> is removed from <parameter>pool</parameter>. Recipients
should release references to <parameter>device</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPool"><type>GduPool</type></link> emitting the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduDevice"><type>GduDevice</type></link> that was removed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GduPool-presentable-added" role="signal"><title>The <literal>&quot;presentable-added&quot;</literal> signal</title>
<indexterm zone="GduPool-presentable-added"><primary sortas="GduPool::presentable-added">GduPool::presentable-added</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GduPool">GduPool</link>        *pool,
                                                        <link linkend="GduPresentable">GduPresentable</link> *presentable,
                                                        <link linkend="gpointer">gpointer</link>        user_data)        : Run Last</programlisting>
<para>
Emitted when <parameter>presentable</parameter> is added to <parameter>pool</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPool"><type>GduPool</type></link> emitting the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presentable</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPresentable"><type>GduPresentable</type></link> that was added.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GduPool-presentable-changed" role="signal"><title>The <literal>&quot;presentable-changed&quot;</literal> signal</title>
<indexterm zone="GduPool-presentable-changed"><primary sortas="GduPool::presentable-changed">GduPool::presentable-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GduPool">GduPool</link>        *pool,
                                                        <link linkend="GduPresentable">GduPresentable</link> *presentable,
                                                        <link linkend="gpointer">gpointer</link>        user_data)        : Run Last</programlisting>
<para>
Emitted when <parameter>presentable</parameter> changes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPool"><type>GduPool</type></link> emitting the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presentable</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPresentable"><type>GduPresentable</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GduPool-presentable-job-changed" role="signal"><title>The <literal>&quot;presentable-job-changed&quot;</literal> signal</title>
<indexterm zone="GduPool-presentable-job-changed"><primary sortas="GduPool::presentable-job-changed">GduPool::presentable-job-changed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GduPool">GduPool</link>        *pool,
                                                        <link linkend="GduPresentable">GduPresentable</link> *presentable,
                                                        <link linkend="gpointer">gpointer</link>        user_data)        : Run Last</programlisting>
<para>
Emitted when job status on <parameter>presentable</parameter> changes.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPool"><type>GduPool</type></link> emitting the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presentable</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduPresentable"><type>GduPresentable</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2><refsect2 id="GduPool-presentable-removed" role="signal"><title>The <literal>&quot;presentable-removed&quot;</literal> signal</title>
<indexterm zone="GduPool-presentable-removed"><primary sortas="GduPool::presentable-removed">GduPool::presentable-removed</primary></indexterm><programlisting><link linkend="void">void</link>                user_function                      (<link linkend="GduPool">GduPool</link>        *pool,
                                                        <link linkend="GduPresentable">GduPresentable</link> *presentable,
                                                        <link linkend="gpointer">gpointer</link>        user_data)        : Run Last</programlisting>
<para>
Emitted when <parameter>presentable</parameter> is removed from <parameter>pool</parameter>. Recipients
should release references to <parameter>presentable</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>pool</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPool"><type>GduPool</type></link> emitting the signal.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>presentable</parameter>&#160;:</term>
<listitem><simpara> The <link linkend="GduPresentable"><type>GduPresentable</type></link> that was removed.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>user data set when the signal handler was connected.</simpara></listitem></varlistentry>
</variablelist></refsect2>
</refsect1>



</refentry>
