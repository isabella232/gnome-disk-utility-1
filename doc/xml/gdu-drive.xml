<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GduDrive">
<refmeta>
<refentrytitle role="top_of_page" id="GduDrive.top_of_page">GduDrive</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-DISK-UTILITY Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GduDrive</refname>
<refpurpose>Drives</refpurpose>
</refnamediv>

<refsynopsisdiv id="GduDrive.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GduDrivePrivate">GduDrivePrivate</link>;
enum                <link linkend="GduCreateVolumeFlags">GduCreateVolumeFlags</link>;
                    <link linkend="GduDrive-struct">GduDrive</link>;
<link linkend="gboolean">gboolean</link>            <link linkend="gdu-drive-is-active">gdu_drive_is_active</link>                 (<link linkend="GduDrive">GduDrive</link> *drive);
<link linkend="gboolean">gboolean</link>            <link linkend="gdu-drive-is-activatable">gdu_drive_is_activatable</link>            (<link linkend="GduDrive">GduDrive</link> *drive);
<link linkend="gboolean">gboolean</link>            <link linkend="gdu-drive-can-deactivate">gdu_drive_can_deactivate</link>            (<link linkend="GduDrive">GduDrive</link> *drive);
<link linkend="gboolean">gboolean</link>            <link linkend="gdu-drive-can-activate">gdu_drive_can_activate</link>              (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="gboolean">gboolean</link> *out_degraded);
<link linkend="void">void</link>                <link linkend="gdu-drive-activate">gdu_drive_activate</link>                  (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="GduDriveActivateFunc">GduDriveActivateFunc</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="void">void</link>                <link linkend="gdu-drive-deactivate">gdu_drive_deactivate</link>                (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="GduDriveDeactivateFunc">GduDriveDeactivateFunc</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="gboolean">gboolean</link>            <link linkend="gdu-drive-can-create-volume">gdu_drive_can_create_volume</link>         (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="gboolean">gboolean</link> *out_is_uninitialized,
                                                         <link linkend="guint64">guint64</link> *out_largest_contiguous_free_segment,
                                                         <link linkend="guint64">guint64</link> *out_total_free,
                                                         <link linkend="GduPresentable">GduPresentable</link> **out_presentable);
<link linkend="void">void</link>                <link linkend="gdu-drive-create-volume">gdu_drive_create_volume</link>             (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="guint64">guint64</link> size,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="GduCreateVolumeFlags">GduCreateVolumeFlags</link> flags,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="GduVolume">GduVolume</link> *         <link linkend="gdu-drive-create-volume-finish">gdu_drive_create_volume_finish</link>      (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *res,
                                                         <link linkend="GError">GError</link> **error);
<link linkend="gboolean">gboolean</link>            <link linkend="gdu-drive-count-mbr-partitions">gdu_drive_count_mbr_partitions</link>      (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="guint">guint</link> *out_num_primary_partitions,
                                                         <link linkend="gboolean">gboolean</link> *out_has_extended_partition);
<link linkend="GList">GList</link> *             <link linkend="gdu-drive-get-volumes">gdu_drive_get_volumes</link>               (<link linkend="GduDrive">GduDrive</link> *drive);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GduDrive.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----GduDrive
         +----<link linkend="GduLinuxMdDrive">GduLinuxMdDrive</link>
</synopsis>
</refsect1>



<refsect1 id="GduDrive.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
GduDrive implements
 <link linkend="GduPresentable">GduPresentable</link>.</para>
</refsect1>





<refsect1 id="GduDrive.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="GduDrive"><type>GduDrive</type></link> class represents drives attached to the
system. Normally, objects of this class corresponds 1:1 to physical
drives (hard disks, optical drives, card readers etc.) attached to
the system. However, it can also relate to software abstractions
such as a Linux md Software RAID array and similar things.
</para>
<para>
See the documentation for <link linkend="GduPresentable"><type>GduPresentable</type></link> for the big picture.</para>
<para>
</para>
</refsect1>

<refsect1 id="GduDrive.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GduDrivePrivate" role="struct">
<title>GduDrivePrivate</title>
<indexterm zone="GduDrivePrivate"><primary sortas="GduDrivePrivate">GduDrivePrivate</primary></indexterm><programlisting>typedef struct _GduDrivePrivate GduDrivePrivate;</programlisting>
<para>
</para></refsect2>
<refsect2 id="GduCreateVolumeFlags" role="enum">
<title>enum GduCreateVolumeFlags</title>
<indexterm zone="GduCreateVolumeFlags"><primary sortas="GduCreateVolumeFlags">GduCreateVolumeFlags</primary></indexterm><programlisting>typedef enum {
        GDU_CREATE_VOLUME_FLAGS_NONE = 0x00,
        GDU_CREATE_VOLUME_FLAGS_LINUX_MD = (1&lt;&lt;0),
        GDU_CREATE_VOLUME_FLAGS_LINUX_LVM2 = (1&lt;&lt;1)
} GduCreateVolumeFlags;
</programlisting>
<para>
Flags used in <link linkend="gdu-drive-create-volume"><function>gdu_drive_create_volume()</function></link>.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="GDU-CREATE-VOLUME-FLAGS-NONE--CAPS" role="constant">
<term><literal>GDU_CREATE_VOLUME_FLAGS_NONE</literal></term>
<listitem><simpara> No flags are set.
</simpara></listitem>
</varlistentry>
<varlistentry id="GDU-CREATE-VOLUME-FLAGS-LINUX-MD--CAPS" role="constant">
<term><literal>GDU_CREATE_VOLUME_FLAGS_LINUX_MD</literal></term>
<listitem><simpara> The volume is to be used for Linux MD RAID.
</simpara></listitem>
</varlistentry>
<varlistentry id="GDU-CREATE-VOLUME-FLAGS-LINUX-LVM2--CAPS" role="constant">
<term><literal>GDU_CREATE_VOLUME_FLAGS_LINUX_LVM2</literal></term>
<listitem><simpara> The volume is to be used for Linux LVM2.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="GduDrive-struct" role="struct">
<title>GduDrive</title>
<indexterm zone="GduDrive-struct"><primary sortas="GduDrive">GduDrive</primary></indexterm><programlisting>typedef struct _GduDrive GduDrive;</programlisting>
<para>
</para></refsect2>
<refsect2 id="gdu-drive-is-active" role="function">
<title>gdu_drive_is_active ()</title>
<indexterm zone="gdu-drive-is-active"><primary sortas="gdu_drive_is_active">gdu_drive_is_active</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdu_drive_is_active                 (<link linkend="GduDrive">GduDrive</link> *drive);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-is-activatable" role="function">
<title>gdu_drive_is_activatable ()</title>
<indexterm zone="gdu-drive-is-activatable"><primary sortas="gdu_drive_is_activatable">gdu_drive_is_activatable</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdu_drive_is_activatable            (<link linkend="GduDrive">GduDrive</link> *drive);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-can-deactivate" role="function">
<title>gdu_drive_can_deactivate ()</title>
<indexterm zone="gdu-drive-can-deactivate"><primary sortas="gdu_drive_can_deactivate">gdu_drive_can_deactivate</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdu_drive_can_deactivate            (<link linkend="GduDrive">GduDrive</link> *drive);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-can-activate" role="function">
<title>gdu_drive_can_activate ()</title>
<indexterm zone="gdu-drive-can-activate"><primary sortas="gdu_drive_can_activate">gdu_drive_can_activate</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdu_drive_can_activate              (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="gboolean">gboolean</link> *out_degraded);</programlisting>
<para>
Checks if <parameter>drive</parameter> can be activated. If this function returns <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>,
<parameter>out_degraded</parameter> will be set to whether the drive will be started in
degraded mode (e.g. starting a mirror RAID array with only one
component available).</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDrive"><type>GduDrive</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_degraded</parameter>&#160;:</term>
<listitem><simpara> <link linkend="NULL--CAPS"><literal>NULL</literal></link> or return location for whether the drive will be degraded if activated.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>drive</parameter> can be activated (and <parameter>out_degraded</parameter> will be set), <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-activate" role="function">
<title>gdu_drive_activate ()</title>
<indexterm zone="gdu-drive-activate"><primary sortas="gdu_drive_activate">gdu_drive_activate</primary></indexterm><programlisting><link linkend="void">void</link>                gdu_drive_activate                  (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="GduDriveActivateFunc">GduDriveActivateFunc</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-deactivate" role="function">
<title>gdu_drive_deactivate ()</title>
<indexterm zone="gdu-drive-deactivate"><primary sortas="gdu_drive_deactivate">gdu_drive_deactivate</primary></indexterm><programlisting><link linkend="void">void</link>                gdu_drive_deactivate                (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="GduDriveDeactivateFunc">GduDriveDeactivateFunc</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-can-create-volume" role="function">
<title>gdu_drive_can_create_volume ()</title>
<indexterm zone="gdu-drive-can-create-volume"><primary sortas="gdu_drive_can_create_volume">gdu_drive_can_create_volume</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdu_drive_can_create_volume         (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="gboolean">gboolean</link> *out_is_uninitialized,
                                                         <link linkend="guint64">guint64</link> *out_largest_contiguous_free_segment,
                                                         <link linkend="guint64">guint64</link> *out_total_free,
                                                         <link linkend="GduPresentable">GduPresentable</link> **out_presentable);</programlisting>
<para>
This method checks if a new volume can be created on <parameter>drive</parameter>.
</para>
<para>
If <parameter>drive</parameter> uses removable media and there is no media inserted,
<link linkend="FALSE--CAPS"><literal>FALSE</literal></link> is returned.
</para>
<para>
If <parameter>drive</parameter> appears to be completely uninitialized (such as a hard
disk full of zeros), <parameter>out_is_unitialized</parameter> is set to <link linkend="TRUE--CAPS"><literal>TRUE</literal></link>, the size
of the media/disk is returned in <parameter>out_largest_segment</parameter> and <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> is
returned. Note that this can also happen if <parameter>drive</parameter> contains
signatures unknown to the operating system so be careful and always
prompt the user.
</para>
<para>
If the disk is partitioned and unallocated space exists but no more
partitions can be created (due to e.g. four primary partitions on a
MBR partitioned disk), this method returns <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> but
<parameter>out_largest_segment</parameter> will be set to a non-zero value.
</para>
<para>
Additionally, <parameter>out_presentable</parameter> will be set to either a
<link linkend="GduVolumeHole"><type>GduVolumeHole</type></link> (if the disk is partitioned and has free space) or
the <link linkend="GduDrive"><type>GduDrive</type></link> (if the disk is uninitialized).
</para>
<para>
You can use <link linkend="gdu-drive-create-volume"><function>gdu_drive_create_volume()</function></link> to create a volume.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDrive"><type>GduDrive</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_is_uninitialized</parameter>&#160;:</term>
<listitem><simpara> Return location for whether <parameter>drive</parameter> is uninitialized or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_largest_contiguous_free_segment</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_total_free</parameter>&#160;:</term>
<listitem><simpara> Return location for total amount of free space on <parameter>drive</parameter> or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_presentable</parameter>&#160;:</term>
<listitem><simpara> Return location for the presentable that represents free space or <link linkend="NULL--CAPS"><literal>NULL</literal></link>. Free
with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>drive</parameter> has unallocated space, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-create-volume" role="function">
<title>gdu_drive_create_volume ()</title>
<indexterm zone="gdu-drive-create-volume"><primary sortas="gdu_drive_create_volume">gdu_drive_create_volume</primary></indexterm><programlisting><link linkend="void">void</link>                gdu_drive_create_volume             (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="guint64">guint64</link> size,
                                                         const <link linkend="gchar">gchar</link> *name,
                                                         <link linkend="GduCreateVolumeFlags">GduCreateVolumeFlags</link> flags,
                                                         <link linkend="GAsyncReadyCallback">GAsyncReadyCallback</link> callback,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>
High-level method for creating a new volume on <parameter>drive</parameter> of size <parameter>size</parameter>
using <parameter>name</parameter> and <parameter>flags</parameter> as influential hints.
</para>
<para>
Depending on the actual type of <parameter>drive</parameter>, different things may happen
- if <parameter>drive</parameter> represents a partitioned drive, then a new partition
will be created (and if the partitioning scheme supports partition
labels <parameter>name</parameter> will be used as the label). If <parameter>drive</parameter> is completely
uninitialized, it may (or may not) be partitioned.
</para>
<para>
If <parameter>drive</parameter> represents a LVM2 volume group, a logical volume may be
created (with <parameter>name</parameter> being used as LV name).
</para>
<para>
This is an asynchronous operation. When the result of the operation
is ready, <parameter>callback</parameter> will be invoked.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDrive"><type>GduDrive</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>size</parameter>&#160;:</term>
<listitem><simpara> The size of the volume to create.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>name</parameter>&#160;:</term>
<listitem><simpara> A name for the volume.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>flags</parameter>&#160;:</term>
<listitem><simpara> Flags describing what kind of volume to create
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>callback</parameter>&#160;:</term>
<listitem><simpara> Function to call when the result is ready.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&#160;:</term>
<listitem><simpara> User data to pass to <parameter>callback</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-create-volume-finish" role="function">
<title>gdu_drive_create_volume_finish ()</title>
<indexterm zone="gdu-drive-create-volume-finish"><primary sortas="gdu_drive_create_volume_finish">gdu_drive_create_volume_finish</primary></indexterm><programlisting><link linkend="GduVolume">GduVolume</link> *         gdu_drive_create_volume_finish      (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="GAsyncResult">GAsyncResult</link> *res,
                                                         <link linkend="GError">GError</link> **error);</programlisting>
<para>
Finishes an operation started with <link linkend="gdu-drive-create-volume"><function>gdu_drive_create_volume()</function></link>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDrive"><type>GduDrive</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>res</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GAsyncResult"><type>GAsyncResult</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>error</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GError"><type>GError</type></link> or <link linkend="NULL--CAPS"><literal>NULL</literal></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GduVolume"><type>GduVolume</type></link> for the created volume or <link linkend="NULL--CAPS"><literal>NULL</literal></link> if <parameter>error</parameter> is
set. The returned object must be freed with <link linkend="g-object-unref"><function>g_object_unref()</function></link>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-count-mbr-partitions" role="function">
<title>gdu_drive_count_mbr_partitions ()</title>
<indexterm zone="gdu-drive-count-mbr-partitions"><primary sortas="gdu_drive_count_mbr_partitions">gdu_drive_count_mbr_partitions</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdu_drive_count_mbr_partitions      (<link linkend="GduDrive">GduDrive</link> *drive,
                                                         <link linkend="guint">guint</link> *out_num_primary_partitions,
                                                         <link linkend="gboolean">gboolean</link> *out_has_extended_partition);</programlisting>
<para>
Counts the number of primary partitions and figures out if there's an extended partition.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDrive"><type>GduDrive</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_num_primary_partitions</parameter>&#160;:</term>
<listitem><simpara> Return location for number of primary partitions.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>out_has_extended_partition</parameter>&#160;:</term>
<listitem><simpara> Return location for number of extended partitions.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><literal>TRUE</literal></link> if <parameter>out_num_logical_partitions</parameter> and <parameter>out_has_extended_partition</parameter> is set, <link linkend="FALSE--CAPS"><literal>FALSE</literal></link> otherwise.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-drive-get-volumes" role="function">
<title>gdu_drive_get_volumes ()</title>
<indexterm zone="gdu-drive-get-volumes"><primary sortas="gdu_drive_get_volumes">gdu_drive_get_volumes</primary></indexterm><programlisting><link linkend="GList">GList</link> *             gdu_drive_get_volumes               (<link linkend="GduDrive">GduDrive</link> *drive);</programlisting>
<para>
Returns a list of all <link linkend="GduVolume"><type>GduVolume</type></link><!-- -->s for <parameter>drive</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDrive"><type>GduDrive</type></link>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GList"><type>GList</type></link> of <link linkend="GduVolume"><type>GduVolume</type></link> objects. The caller must free the list and each element.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
