<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd" [
<!ENTITY version SYSTEM "version.xml">
]>
<refentry id="GduLinuxMdDrive">
<refmeta>
<refentrytitle role="top_of_page" id="GduLinuxMdDrive.top_of_page">GduLinuxMdDrive</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>GNOME-DISK-UTILITY Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>GduLinuxMdDrive</refname>
<refpurpose>Linux Software RAID drives</refpurpose>
</refnamediv>

<refsynopsisdiv id="GduLinuxMdDrive.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="GduLinuxMdDrivePrivate">GduLinuxMdDrivePrivate</link>;
                    <link linkend="GduLinuxMdDrive-struct">GduLinuxMdDrive</link>;
enum                <link linkend="GduLinuxMdDriveSlaveFlags">GduLinuxMdDriveSlaveFlags</link>;
const <link linkend="gchar">gchar</link> *       <link linkend="gdu-linux-md-drive-get-uuid">gdu_linux_md_drive_get_uuid</link>         (<link linkend="GduLinuxMdDrive">GduLinuxMdDrive</link> *drive);
<link linkend="gboolean">gboolean</link>            <link linkend="gdu-linux-md-drive-has-slave">gdu_linux_md_drive_has_slave</link>        (<link linkend="GduLinuxMdDrive">GduLinuxMdDrive</link> *drive,
                                                         <link linkend="GduDevice">GduDevice</link> *device);
<link linkend="GList">GList</link> *             <link linkend="gdu-linux-md-drive-get-slaves">gdu_linux_md_drive_get_slaves</link>       (<link linkend="GduLinuxMdDrive">GduLinuxMdDrive</link> *drive);
<link linkend="GduLinuxMdDriveSlaveFlags">GduLinuxMdDriveSlaveFlags</link>  <link linkend="gdu-linux-md-drive-get-slave-flags">gdu_linux_md_drive_get_slave_flags</link>
                                                        (<link linkend="GduLinuxMdDrive">GduLinuxMdDrive</link> *drive,
                                                         <link linkend="GduDevice">GduDevice</link> *slave);
</synopsis>
</refsynopsisdiv>

<refsect1 id="GduLinuxMdDrive.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="GduDrive">GduDrive</link>
         +----GduLinuxMdDrive
</synopsis>
</refsect1>



<refsect1 id="GduLinuxMdDrive.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
GduLinuxMdDrive implements
 <link linkend="GduPresentable">GduPresentable</link>.</para>
</refsect1>





<refsect1 id="GduLinuxMdDrive.description" role="desc">
<title role="desc.title">Description</title>
<para>
The <link linkend="GduLinuxMdDrive"><type>GduLinuxMdDrive</type></link> class represents drives Linux Software RAID arrays.
</para>
<para>
An <link linkend="GduLinuxMdDrive"><type>GduLinuxMdDrive</type></link> drive is added to <link linkend="GduPool"><type>GduPool</type></link> as soon as a
component device that is part of the abstraction is available.  The
drive can be started (<link linkend="gdu-drive-start"><function>gdu_drive_start()</function></link>) and stopped
(<link linkend="gdu-drive-stop"><function>gdu_drive_stop()</function></link>) and the state of the underlying components can
be queried through <link linkend="gdu-linux-md-drive-get-slave-flags"><function>gdu_linux_md_drive_get_slave_flags()</function></link>).
</para>
<para>
See the documentation for <link linkend="GduPresentable"><type>GduPresentable</type></link> for the big picture.</para>
<para>
</para>
</refsect1>

<refsect1 id="GduLinuxMdDrive.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="GduLinuxMdDrivePrivate" role="struct">
<title>GduLinuxMdDrivePrivate</title>
<indexterm zone="GduLinuxMdDrivePrivate"><primary sortas="GduLinuxMdDrivePrivate">GduLinuxMdDrivePrivate</primary></indexterm><programlisting>typedef struct _GduLinuxMdDrivePrivate GduLinuxMdDrivePrivate;</programlisting>
<para>
</para></refsect2>
<refsect2 id="GduLinuxMdDrive-struct" role="struct">
<title>GduLinuxMdDrive</title>
<indexterm zone="GduLinuxMdDrive-struct"><primary sortas="GduLinuxMdDrive">GduLinuxMdDrive</primary></indexterm><programlisting>typedef struct _GduLinuxMdDrive GduLinuxMdDrive;</programlisting>
<para>
</para></refsect2>
<refsect2 id="GduLinuxMdDriveSlaveFlags" role="enum">
<title>enum GduLinuxMdDriveSlaveFlags</title>
<indexterm zone="GduLinuxMdDriveSlaveFlags"><primary sortas="GduLinuxMdDriveSlaveFlags">GduLinuxMdDriveSlaveFlags</primary></indexterm><programlisting>typedef enum {
        GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_NONE          = 0,
        GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_NOT_ATTACHED  = (1&lt;&lt;0),
        GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_FAULTY        = (1&lt;&lt;1),
        GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_IN_SYNC       = (1&lt;&lt;2),
        GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_WRITEMOSTLY   = (1&lt;&lt;3),
        GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_BLOCKED       = (1&lt;&lt;4),
        GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_SPARE         = (1&lt;&lt;5),
} GduLinuxMdDriveSlaveFlags;
</programlisting>
<para>
State for slaves of an Linux MD software raid drive. Everything but <parameter>GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_NONE</parameter>
and <parameter>GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_NOT_ATTACHED</parameter> corresponds to the comma-separated strings in
<literal>/sys/block/mdXXX/md/dev-YYY/state</literal> in sysfs. See Documentation/md.txt in the Linux
kernel for more information.</para>
<para>
</para><variablelist role="enum">
<varlistentry id="GDU-LINUX-MD-DRIVE-SLAVE-FLAGS-NONE--CAPS" role="constant">
<term><literal>GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_NONE</literal></term>
<listitem><simpara> No flags are set.
</simpara></listitem>
</varlistentry>
<varlistentry id="GDU-LINUX-MD-DRIVE-SLAVE-FLAGS-NOT-ATTACHED--CAPS" role="constant">
<term><literal>GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_NOT_ATTACHED</literal></term>
<listitem><simpara> If set, the slave is
not part of the array but appears as a child only because the UUID
on the device matches that of the array. Is also set if the array
does not exist.
</simpara></listitem>
</varlistentry>
<varlistentry id="GDU-LINUX-MD-DRIVE-SLAVE-FLAGS-FAULTY--CAPS" role="constant">
<term><literal>GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_FAULTY</literal></term>
<listitem><simpara> Device has been kick from
active use due to a detected fault.
</simpara></listitem>
</varlistentry>
<varlistentry id="GDU-LINUX-MD-DRIVE-SLAVE-FLAGS-IN-SYNC--CAPS" role="constant">
<term><literal>GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_IN_SYNC</literal></term>
<listitem><simpara> Device is a fully in-sync
member of the array.
</simpara></listitem>
</varlistentry>
<varlistentry id="GDU-LINUX-MD-DRIVE-SLAVE-FLAGS-WRITEMOSTLY--CAPS" role="constant">
<term><literal>GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_WRITEMOSTLY</literal></term>
<listitem><simpara> Device will only be
subject to read requests if there are no other options. This
applies only to RAID1 arrays.
</simpara></listitem>
</varlistentry>
<varlistentry id="GDU-LINUX-MD-DRIVE-SLAVE-FLAGS-BLOCKED--CAPS" role="constant">
<term><literal>GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_BLOCKED</literal></term>
<listitem><simpara> Device has failed,
metadata is "external", and the failure hasn't been acknowledged
yet. Writes that would write to this device if it were not faulty
are blocked.
</simpara></listitem>
</varlistentry>
<varlistentry id="GDU-LINUX-MD-DRIVE-SLAVE-FLAGS-SPARE--CAPS" role="constant">
<term><literal>GDU_LINUX_MD_DRIVE_SLAVE_FLAGS_SPARE</literal></term>
<listitem><simpara> Device is working, but not a
full member. This includes spares that in the process of being
recovered to.
</simpara></listitem>
</varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-linux-md-drive-get-uuid" role="function">
<title>gdu_linux_md_drive_get_uuid ()</title>
<indexterm zone="gdu-linux-md-drive-get-uuid"><primary sortas="gdu_linux_md_drive_get_uuid">gdu_linux_md_drive_get_uuid</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link> *       gdu_linux_md_drive_get_uuid         (<link linkend="GduLinuxMdDrive">GduLinuxMdDrive</link> *drive);</programlisting>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-linux-md-drive-has-slave" role="function">
<title>gdu_linux_md_drive_has_slave ()</title>
<indexterm zone="gdu-linux-md-drive-has-slave"><primary sortas="gdu_linux_md_drive_has_slave">gdu_linux_md_drive_has_slave</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            gdu_linux_md_drive_has_slave        (<link linkend="GduLinuxMdDrive">GduLinuxMdDrive</link> *drive,
                                                         <link linkend="GduDevice">GduDevice</link> *device);</programlisting>
<para>
Checks if <parameter>device</parameter> is a component of <parameter>drive</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduLinuxMdDrive"><type>GduLinuxMdDrive</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>device</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDevice"><type>GduDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> <link linkend="TRUE--CAPS"><type>TRUE</type></link> only if <parameter>slave</parameter> is a component of <parameter>drive</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-linux-md-drive-get-slaves" role="function">
<title>gdu_linux_md_drive_get_slaves ()</title>
<indexterm zone="gdu-linux-md-drive-get-slaves"><primary sortas="gdu_linux_md_drive_get_slaves">gdu_linux_md_drive_get_slaves</primary></indexterm><programlisting><link linkend="GList">GList</link> *             gdu_linux_md_drive_get_slaves       (<link linkend="GduLinuxMdDrive">GduLinuxMdDrive</link> *drive);</programlisting>
<para>
Gets all slaves of <parameter>drive</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduLinuxMdDrive"><type>GduLinuxMdDrive</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A <link linkend="GList"><type>GList</type></link> of <link linkend="GduDevice"><type>GduDevice</type></link> objects. Caller must free this list (and call <link linkend="g-object-unref"><function>g_object_unref()</function></link> on all elements).
</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="gdu-linux-md-drive-get-slave-flags" role="function">
<title>gdu_linux_md_drive_get_slave_flags ()</title>
<indexterm zone="gdu-linux-md-drive-get-slave-flags"><primary sortas="gdu_linux_md_drive_get_slave_flags">gdu_linux_md_drive_get_slave_flags</primary></indexterm><programlisting><link linkend="GduLinuxMdDriveSlaveFlags">GduLinuxMdDriveSlaveFlags</link>  gdu_linux_md_drive_get_slave_flags
                                                        (<link linkend="GduLinuxMdDrive">GduLinuxMdDrive</link> *drive,
                                                         <link linkend="GduDevice">GduDevice</link> *slave);</programlisting>
<para>
Gets the state of <parameter>slave</parameter> of <parameter>drive</parameter>.</para>
<para>
</para><variablelist role="params">
<varlistentry><term><parameter>drive</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduLinuxMdDrive"><type>GduLinuxMdDrive</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>slave</parameter>&#160;:</term>
<listitem><simpara> A <link linkend="GduDevice"><type>GduDevice</type></link>.
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara> A value from <link linkend="GduLinuxMdDriveSlaveState"><type>GduLinuxMdDriveSlaveState</type></link> for <parameter>slave</parameter>.
</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>




</refentry>
